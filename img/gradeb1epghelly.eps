%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 814 595
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Sunday, November 26, 2017 8:12:31 PM BRST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
814 595 setpagesize
0 0 0 0 setmargins
0 0 setorigin
814 595 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
814.000 0.00000 l
814.000 595.000 l
0.00000 595.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
814.000 0.00000 l
814.000 595.000 l
0.00000 595.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 814 595 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -12.0000 73.0000 ] concat
1.00000 1.00000 1.00000 RG
newpath
12.0000 -73.0000 m
826.000 -73.0000 l
826.000 522.000 l
12.0000 522.000 l
12.0000 -73.0000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -12.0000 73.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -12.0000 73.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -12.0000 73.0000 ] defaultmatrix matrix concatmatrix setmatrix
0 J
1.45000 M
newpath
175.400 300.000 m
660.000 300.000 l
660.000 210.000 l
660.000 33.8000 l
S
newpath
680.395 125.265 m
680.395 128.562 l
681.879 128.562 l
682.431 128.562 682.858 128.419 683.160 128.132  c
683.462 127.846 683.613 127.437 683.613 126.906  c
683.613 126.385 683.462 125.981 683.160 125.695  c
682.858 125.408 682.431 125.265 681.879 125.265  c
680.395 125.265 l
h
679.207 124.296 m
681.879 124.296 l
682.868 124.296 683.613 124.518 684.113 124.961  c
684.613 125.403 684.863 126.052 684.863 126.906  c
684.863 127.770 684.613 128.424 684.113 128.867  c
683.613 129.309 682.868 129.531 681.879 129.531  c
680.395 129.531 l
680.395 133.046 l
679.207 133.046 l
679.207 124.296 l
h
688.990 123.937 m
688.469 124.833 688.081 125.721 687.826 126.601  c
687.571 127.481 687.443 128.375 687.443 129.281  c
687.443 130.177 687.571 131.067 687.826 131.953  c
688.081 132.838 688.469 133.729 688.990 134.625  c
688.053 134.625 l
687.469 133.708 687.032 132.807 686.740 131.921  c
686.449 131.036 686.303 130.156 686.303 129.281  c
686.303 128.406 686.449 127.528 686.740 126.648  c
687.032 125.768 687.469 124.864 688.053 123.937  c
688.990 123.937 l
h
689.922 124.296 m
697.312 124.296 l
697.312 125.296 l
694.219 125.296 l
694.219 133.046 l
693.031 133.046 l
693.031 125.296 l
689.922 125.296 l
689.922 124.296 l
h
698.252 123.937 m
699.189 123.937 l
699.773 124.864 700.210 125.768 700.502 126.648  c
700.794 127.528 700.939 128.406 700.939 129.281  c
700.939 130.156 700.794 131.036 700.502 131.921  c
700.210 132.807 699.773 133.708 699.189 134.625  c
698.252 134.625 l
698.762 133.729 699.148 132.838 699.408 131.953  c
699.669 131.067 699.799 130.177 699.799 129.281  c
699.799 128.375 699.669 127.481 699.408 126.601  c
699.148 125.721 698.762 124.833 698.252 123.937  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
240.065 53.2694 m
241.000 270.000 l
241.000 270.000 l
311.096 270.000 l
S
newpath
200.384 134.078 m
200.384 137.375 l
201.868 137.375 l
202.420 137.375 202.847 137.232 203.150 136.945  c
203.452 136.659 203.603 136.250 203.603 135.719  c
203.603 135.198 203.452 134.794 203.150 134.508  c
202.847 134.221 202.420 134.078 201.868 134.078  c
200.384 134.078 l
h
199.196 133.109 m
201.868 133.109 l
202.858 133.109 203.603 133.331 204.103 133.774  c
204.603 134.216 204.853 134.865 204.853 135.719  c
204.853 136.583 204.603 137.237 204.103 137.680  c
203.603 138.123 202.858 138.344 201.868 138.344  c
200.384 138.344 l
200.384 141.859 l
199.196 141.859 l
199.196 133.109 l
h
208.980 132.750 m
208.459 133.646 208.071 134.534 207.816 135.414  c
207.560 136.294 207.433 137.188 207.433 138.094  c
207.433 138.990 207.560 139.880 207.816 140.766  c
208.071 141.651 208.459 142.542 208.980 143.438  c
208.042 143.438 l
207.459 142.521 207.021 141.620 206.730 140.734  c
206.438 139.849 206.292 138.969 206.292 138.094  c
206.292 137.219 206.438 136.341 206.730 135.461  c
207.021 134.581 207.459 133.677 208.042 132.750  c
208.980 132.750 l
h
213.380 141.859 m
210.036 133.109 l
211.271 133.109 l
214.052 140.469 l
216.817 133.109 l
218.052 133.109 l
214.724 141.859 l
213.380 141.859 l
h
219.120 132.750 m
220.058 132.750 l
220.641 133.677 221.079 134.581 221.370 135.461  c
221.662 136.341 221.808 137.219 221.808 138.094  c
221.808 138.969 221.662 139.849 221.370 140.734  c
221.079 141.620 220.641 142.521 220.058 143.438  c
219.120 143.438 l
219.631 142.542 220.016 141.651 220.276 140.766  c
220.537 139.880 220.667 138.990 220.667 138.094  c
220.667 137.188 220.537 136.294 220.276 135.414  c
220.016 134.534 219.631 133.646 219.120 132.750  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
480.000 75.0000 m
480.000 270.000 l
480.000 270.000 l
509.000 270.000 l
S
newpath
429.343 313.896 m
436.733 313.896 l
436.733 314.896 l
433.640 314.896 l
433.640 322.646 l
432.452 322.646 l
432.452 314.896 l
429.343 314.896 l
429.343 313.896 l
h
441.642 317.084 m
441.517 317.021 441.384 316.972 441.243 316.936  c
441.103 316.899 440.944 316.881 440.767 316.881  c
440.162 316.881 439.696 317.079 439.368 317.475  c
439.040 317.870 438.876 318.443 438.876 319.193  c
438.876 322.646 l
437.798 322.646 l
437.798 316.084 l
438.876 316.084 l
438.876 317.100 l
439.105 316.704 439.402 316.410 439.767 316.217  c
440.131 316.024 440.574 315.928 441.095 315.928  c
441.168 315.928 441.248 315.933 441.337 315.943  c
441.425 315.954 441.522 315.969 441.626 315.990  c
441.642 317.084 l
h
442.653 320.053 m
442.653 316.084 l
443.731 316.084 l
443.731 320.021 l
443.731 320.636 443.854 321.100 444.099 321.412  c
444.343 321.725 444.705 321.881 445.185 321.881  c
445.768 321.881 446.229 321.696 446.567 321.326  c
446.906 320.956 447.075 320.449 447.075 319.803  c
447.075 316.084 l
448.153 316.084 l
448.153 322.646 l
447.075 322.646 l
447.075 321.631 l
446.815 322.037 446.513 322.337 446.169 322.529  c
445.825 322.722 445.424 322.818 444.966 322.818  c
444.205 322.818 443.630 322.584 443.239 322.115  c
442.849 321.646 442.653 320.959 442.653 320.053  c
h
455.993 319.100 m
455.993 319.615 l
451.024 319.615 l
451.076 320.365 451.303 320.933 451.704 321.318  c
452.105 321.704 452.660 321.896 453.368 321.896  c
453.785 321.896 454.188 321.847 454.579 321.748  c
454.970 321.649 455.358 321.495 455.743 321.287  c
455.743 322.318 l
455.347 322.475 454.946 322.597 454.540 322.686  c
454.134 322.774 453.722 322.818 453.306 322.818  c
452.264 322.818 451.436 322.514 450.821 321.904  c
450.207 321.295 449.899 320.469 449.899 319.428  c
449.899 318.355 450.191 317.503 450.774 316.873  c
451.358 316.243 452.139 315.928 453.118 315.928  c
454.004 315.928 454.704 316.212 455.220 316.779  c
455.735 317.347 455.993 318.120 455.993 319.100  c
h
454.915 318.771 m
454.905 318.188 454.738 317.719 454.415 317.365  c
454.092 317.011 453.665 316.834 453.134 316.834  c
452.530 316.834 452.048 317.006 451.688 317.350  c
451.329 317.693 451.123 318.173 451.071 318.787  c
454.915 318.771 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
360.000 75.0000 m
360.000 270.000 l
391.000 270.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
315.000 89.9855 m
630.000 89.6810 l
630.000 89.6810 l
630.000 119.023 l
S
newpath
677.089 92.2375 m
682.120 92.2375 l
682.120 93.2375 l
678.276 93.2375 l
678.276 95.8157 l
681.745 95.8157 l
681.745 96.8157 l
678.276 96.8157 l
678.276 100.988 l
677.089 100.988 l
677.089 92.2375 l
h
686.928 97.6907 m
686.064 97.6907 685.462 97.7896 685.124 97.9875  c
684.785 98.1855 684.616 98.5240 684.616 99.0032  c
684.616 99.3886 684.744 99.6933 684.999 99.9172  c
685.254 100.141 685.595 100.253 686.022 100.253  c
686.626 100.253 687.108 100.042 687.467 99.6204  c
687.827 99.1985 688.007 98.6334 688.007 97.9250  c
688.007 97.6907 l
686.928 97.6907 l
h
689.085 97.2375 m
689.085 100.988 l
688.007 100.988 l
688.007 99.9875 l
687.757 100.383 687.449 100.678 687.085 100.870  c
686.720 101.063 686.272 101.159 685.741 101.159  c
685.064 101.159 684.527 100.969 684.132 100.589  c
683.736 100.209 683.538 99.7063 683.538 99.0813  c
683.538 98.3417 683.785 97.7844 684.280 97.4094  c
684.775 97.0344 685.512 96.8469 686.491 96.8469  c
688.007 96.8469 l
688.007 96.7375 l
688.007 96.2375 687.842 95.8521 687.514 95.5813  c
687.186 95.3105 686.730 95.1750 686.147 95.1750  c
685.772 95.1750 685.405 95.2219 685.046 95.3157  c
684.686 95.4094 684.345 95.5448 684.022 95.7219  c
684.022 94.7219 l
684.418 94.5657 684.801 94.4511 685.171 94.3782  c
685.540 94.3053 685.902 94.2688 686.257 94.2688  c
687.204 94.2688 687.913 94.5136 688.382 95.0032  c
688.850 95.4928 689.085 96.2375 689.085 97.2375  c
h
691.298 91.8625 m
692.376 91.8625 l
692.376 100.988 l
691.298 100.988 l
691.298 91.8625 l
h
698.819 94.6125 m
698.819 95.6438 l
698.517 95.4875 698.202 95.3704 697.874 95.2922  c
697.546 95.2141 697.204 95.1750 696.850 95.1750  c
696.319 95.1750 695.918 95.2558 695.647 95.4172  c
695.376 95.5787 695.241 95.8261 695.241 96.1594  c
695.241 96.4094 695.337 96.6047 695.530 96.7454  c
695.723 96.8860 696.111 97.0188 696.694 97.1438  c
697.053 97.2375 l
697.824 97.3938 698.371 97.6230 698.694 97.9250  c
699.017 98.2271 699.178 98.6438 699.178 99.1750  c
699.178 99.7896 698.936 100.274 698.452 100.628  c
697.967 100.982 697.303 101.159 696.460 101.159  c
696.105 101.159 695.738 101.126 695.358 101.058  c
694.978 100.990 694.579 100.889 694.163 100.753  c
694.163 99.6282 l
694.559 99.8365 694.949 99.9928 695.335 100.097  c
695.720 100.201 696.105 100.253 696.491 100.253  c
696.991 100.253 697.379 100.167 697.655 99.9954  c
697.931 99.8235 698.069 99.5761 698.069 99.2532  c
698.069 98.9615 697.970 98.7375 697.772 98.5813  c
697.574 98.4250 697.142 98.2740 696.475 98.1282  c
696.100 98.0500 l
695.434 97.9042 694.952 97.6855 694.655 97.3938  c
694.358 97.1021 694.210 96.7063 694.210 96.2063  c
694.210 95.5813 694.428 95.1021 694.866 94.7688  c
695.303 94.4355 695.923 94.2688 696.725 94.2688  c
697.121 94.2688 697.496 94.2974 697.850 94.3547  c
698.204 94.4120 698.527 94.4980 698.819 94.6125  c
h
706.508 97.4407 m
706.508 97.9563 l
701.540 97.9563 l
701.592 98.7063 701.818 99.2740 702.219 99.6594  c
702.620 100.045 703.175 100.238 703.883 100.238  c
704.300 100.238 704.704 100.188 705.094 100.089  c
705.485 99.9902 705.873 99.8365 706.258 99.6282  c
706.258 100.659 l
705.863 100.816 705.462 100.938 705.055 101.027  c
704.649 101.115 704.238 101.159 703.821 101.159  c
702.779 101.159 701.951 100.855 701.337 100.245  c
700.722 99.6360 700.415 98.8105 700.415 97.7688  c
700.415 96.6959 700.706 95.8443 701.290 95.2141  c
701.873 94.5839 702.654 94.2688 703.633 94.2688  c
704.519 94.2688 705.219 94.5527 705.735 95.1204  c
706.251 95.6881 706.508 96.4615 706.508 97.4407  c
h
705.430 97.1125 m
705.420 96.5292 705.253 96.0605 704.930 95.7063  c
704.607 95.3521 704.180 95.1750 703.649 95.1750  c
703.045 95.1750 702.563 95.3469 702.204 95.6907  c
701.844 96.0344 701.639 96.5136 701.587 97.1282  c
705.430 97.1125 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
297.000 194.730 m
630.000 194.730 l
630.000 225.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
297.000 141.730 m
630.000 141.730 l
630.000 172.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
586.000 75.0000 m
586.000 270.000 l
586.000 270.000 l
615.000 270.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
676.000 255.000 m
676.000 360.000 l
781.000 360.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
599.000 314.730 m
730.000 314.730 l
730.000 405.000 l
S
q
[ 1.00000 0.00000 0.00000 1.00000 750.000 373.000 ] concat
0 0 22 20 rc
q
q
q
Q
q
Q
q
Q
q
Q
newpath
1.17188 3.25000 m
2.35938 3.25000 l
2.35938 6.95312 l
6.28125 3.25000 l
7.81250 3.25000 l
3.46875 7.32812 l
8.12500 12.0000 l
6.56250 12.0000 l
2.35938 7.78125 l
2.35938 12.0000 l
1.17188 12.0000 l
1.17188 3.25000 l
h
f
newpath
8.92188 16.1719 m
12.3594 16.1719 l
12.3594 17.0000 l
7.73438 17.0000 l
7.73438 16.1719 l
8.10938 15.7865 8.61979 15.2656 9.26562 14.6094  c
9.91146 13.9531 10.3177 13.5312 10.4844 13.3438  c
10.7969 12.9896 11.0156 12.6901 11.1406 12.4453  c
11.2656 12.2005 11.3281 11.9583 11.3281 11.7188  c
11.3281 11.3333 11.1927 11.0182 10.9219 10.7734  c
10.6510 10.5286 10.2969 10.4062 9.85938 10.4062  c
9.54688 10.4062 9.22135 10.4609 8.88281 10.5703  c
8.54427 10.6797 8.17708 10.8438 7.78125 11.0625  c
7.78125 10.0625 l
8.17708 9.90625 8.54688 9.78646 8.89062 9.70312  c
9.23438 9.61979 9.55208 9.57812 9.84375 9.57812  c
10.5938 9.57812 11.1953 9.76562 11.6484 10.1406  c
12.1016 10.5156 12.3281 11.0208 12.3281 11.6562  c
12.3281 11.9583 12.2708 12.2422 12.1562 12.5078  c
12.0417 12.7734 11.8385 13.0885 11.5469 13.4531  c
11.4635 13.5469 11.2031 13.8203 10.7656 14.2734  c
10.3281 14.7266 9.71354 15.3594 8.92188 16.1719  c
h
14.5342 15.7656 m
15.5654 15.7656 l
15.5654 16.5938 l
14.7686 18.1562 l
14.1279 18.1562 l
14.5342 16.5938 l
14.5342 15.7656 l
h
20.3223 10.5625 m
17.8379 14.4531 l
20.3223 14.4531 l
20.3223 10.5625 l
h
20.0566 9.70312 m
21.3066 9.70312 l
21.3066 14.4531 l
22.3379 14.4531 l
22.3379 15.2812 l
21.3066 15.2812 l
21.3066 17.0000 l
20.3223 17.0000 l
20.3223 15.2812 l
17.0254 15.2812 l
17.0254 14.3281 l
20.0566 9.70312 l
h
f
Q
Q
Q
2 J
10.0000 M
0 J
1.45000 M
newpath
670.647 -51.5615 m
670.000 -9.92000 l
606.600 -9.92000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
728.000 325.000 m
683.000 325.000 l
683.000 355.270 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
698.000 374.730 m
724.000 374.730 l
724.000 405.000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
740.000 329.730 m
740.000 354.730 l
769.000 354.730 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
755.000 10.0800 m
690.080 10.0800 l
690.080 55.0800 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
690.880 -52.7815 m
690.880 -9.92000 l
755.000 -9.92000 l
S
q
[ 1.00000 0.00000 0.00000 1.00000 709.000 -49.0000 ] concat
0 0 22 20 rc
q
q
q
Q
q
Q
q
Q
q
Q
newpath
7.14062 10.7500 m
7.14062 8.40625 l
5.20312 8.40625 l
5.20312 7.42188 l
8.31250 7.42188 l
8.31250 11.1875 l
7.85417 11.5104 7.35156 11.7552 6.80469 11.9219  c
6.25781 12.0885 5.67188 12.1719 5.04688 12.1719  c
3.67188 12.1719 2.59896 11.7708 1.82812 10.9688  c
1.05729 10.1667 .671875 9.05729 .671875 7.64062  c
.671875 6.20312 1.05729 5.08594 1.82812 4.28906  c
2.59896 3.49219 3.67188 3.09375 5.04688 3.09375  c
5.60938 3.09375 6.14844 3.16406 6.66406 3.30469  c
7.17969 3.44531 7.65625 3.65104 8.09375 3.92188  c
8.09375 5.18750 l
7.65625 4.81250 7.19010 4.53125 6.69531 4.34375  c
6.20052 4.15625 5.68229 4.06250 5.14062 4.06250  c
4.06771 4.06250 3.26302 4.36198 2.72656 4.96094  c
2.19010 5.55990 1.92188 6.45312 1.92188 7.64062  c
1.92188 8.81771 2.19010 9.70573 2.72656 10.3047  c
3.26302 10.9036 4.06771 11.2031 5.14062 11.2031  c
5.55729 11.2031 5.92969 11.1667 6.25781 11.0938  c
6.58594 11.0208 6.88021 10.9062 7.14062 10.7500  c
h
f
newpath
10.9688 13.5156 m
10.9688 16.1875 l
12.5469 16.1875 l
13.0781 16.1875 13.4714 16.0781 13.7266 15.8594  c
13.9818 15.6406 14.1094 15.3021 14.1094 14.8438  c
14.1094 14.3958 13.9818 14.0625 13.7266 13.8438  c
13.4714 13.6250 13.0781 13.5156 12.5469 13.5156  c
10.9688 13.5156 l
h
10.9688 10.5156 m
10.9688 12.7188 l
12.4219 12.7188 l
12.9115 12.7188 13.2734 12.6276 13.5078 12.4453  c
13.7422 12.2630 13.8594 11.9896 13.8594 11.6250  c
13.8594 11.2500 13.7422 10.9714 13.5078 10.7891  c
13.2734 10.6068 12.9115 10.5156 12.4219 10.5156  c
10.9688 10.5156 l
h
9.98438 9.70312 m
12.5000 9.70312 l
13.2500 9.70312 13.8281 9.85938 14.2344 10.1719  c
14.6406 10.4844 14.8438 10.9323 14.8438 11.5156  c
14.8438 11.9635 14.7396 12.3177 14.5312 12.5781  c
14.3229 12.8385 14.0208 13.0000 13.6250 13.0625  c
14.1042 13.1667 14.4792 13.3854 14.7500 13.7188  c
15.0208 14.0521 15.1562 14.4635 15.1562 14.9531  c
15.1562 15.6094 14.9349 16.1146 14.4922 16.4688  c
14.0495 16.8229 13.4167 17.0000 12.5938 17.0000  c
9.98438 17.0000 l
9.98438 9.70312 l
h
17.0947 16.1719 m
18.7197 16.1719 l
18.7197 10.6094 l
16.9541 10.9531 l
16.9541 10.0625 l
18.7041 9.70312 l
19.6885 9.70312 l
19.6885 16.1719 l
21.2979 16.1719 l
21.2979 17.0000 l
17.0947 17.0000 l
17.0947 16.1719 l
h
f
Q
Q
Q
2 J
10.0000 M
0 J
1.45000 M
newpath
601.000 10.0800 m
670.000 10.0800 l
670.000 55.0800 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
650.200 .198501 m
665.800 .138088 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
594.997 -.816706 m
641.800 .129827 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
710.400 .190195 m
695.800 .135842 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
770.400 .319977 m
723.600 .227769 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
680.800 27.8800 m
680.800 15.0800 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
680.302 55.0830 m
680.752 32.6960 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
680.800 -26.2000 m
680.800 -14.9200 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
680.800 -50.1612 m
680.800 -37.7680 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
119.628 265.468 m
120.400 304.596 l
57.0000 304.596 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
206.350 324.596 m
140.480 324.596 l
140.480 369.596 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
141.280 261.734 m
141.280 304.596 l
206.350 304.596 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
57.0000 324.596 m
120.400 324.596 l
120.400 369.596 l
S
q
[ 1.00000 0.00000 0.00000 1.00000 79.0000 342.000 ] concat
0 0 22 20 rc
q
q
q
Q
q
Q
q
Q
q
Q
newpath
7.14062 10.7500 m
7.14062 8.40625 l
5.20312 8.40625 l
5.20312 7.42188 l
8.31250 7.42188 l
8.31250 11.1875 l
7.85417 11.5104 7.35156 11.7552 6.80469 11.9219  c
6.25781 12.0885 5.67188 12.1719 5.04688 12.1719  c
3.67188 12.1719 2.59896 11.7708 1.82812 10.9688  c
1.05729 10.1667 .671875 9.05729 .671875 7.64062  c
.671875 6.20312 1.05729 5.08594 1.82812 4.28906  c
2.59896 3.49219 3.67188 3.09375 5.04688 3.09375  c
5.60938 3.09375 6.14844 3.16406 6.66406 3.30469  c
7.17969 3.44531 7.65625 3.65104 8.09375 3.92188  c
8.09375 5.18750 l
7.65625 4.81250 7.19010 4.53125 6.69531 4.34375  c
6.20052 4.15625 5.68229 4.06250 5.14062 4.06250  c
4.06771 4.06250 3.26302 4.36198 2.72656 4.96094  c
2.19010 5.55990 1.92188 6.45312 1.92188 7.64062  c
1.92188 8.81771 2.19010 9.70573 2.72656 10.3047  c
3.26302 10.9036 4.06771 11.2031 5.14062 11.2031  c
5.55729 11.2031 5.92969 11.1667 6.25781 11.0938  c
6.58594 11.0208 6.88021 10.9062 7.14062 10.7500  c
h
f
newpath
10.9688 13.5156 m
10.9688 16.1875 l
12.5469 16.1875 l
13.0781 16.1875 13.4714 16.0781 13.7266 15.8594  c
13.9818 15.6406 14.1094 15.3021 14.1094 14.8438  c
14.1094 14.3958 13.9818 14.0625 13.7266 13.8438  c
13.4714 13.6250 13.0781 13.5156 12.5469 13.5156  c
10.9688 13.5156 l
h
10.9688 10.5156 m
10.9688 12.7188 l
12.4219 12.7188 l
12.9115 12.7188 13.2734 12.6276 13.5078 12.4453  c
13.7422 12.2630 13.8594 11.9896 13.8594 11.6250  c
13.8594 11.2500 13.7422 10.9714 13.5078 10.7891  c
13.2734 10.6068 12.9115 10.5156 12.4219 10.5156  c
10.9688 10.5156 l
h
9.98438 9.70312 m
12.5000 9.70312 l
13.2500 9.70312 13.8281 9.85938 14.2344 10.1719  c
14.6406 10.4844 14.8438 10.9323 14.8438 11.5156  c
14.8438 11.9635 14.7396 12.3177 14.5312 12.5781  c
14.3229 12.8385 14.0208 13.0000 13.6250 13.0625  c
14.1042 13.1667 14.4792 13.3854 14.7500 13.7188  c
15.0208 14.0521 15.1562 14.4635 15.1562 14.9531  c
15.1562 15.6094 14.9349 16.1146 14.4922 16.4688  c
14.0495 16.8229 13.4167 17.0000 12.5938 17.0000  c
9.98438 17.0000 l
9.98438 9.70312 l
h
17.7822 16.1719 m
21.2197 16.1719 l
21.2197 17.0000 l
16.5947 17.0000 l
16.5947 16.1719 l
16.9697 15.7865 17.4801 15.2656 18.1260 14.6094  c
18.7718 13.9531 19.1781 13.5312 19.3447 13.3438  c
19.6572 12.9896 19.8760 12.6901 20.0010 12.4453  c
20.1260 12.2005 20.1885 11.9583 20.1885 11.7188  c
20.1885 11.3333 20.0531 11.0182 19.7822 10.7734  c
19.5114 10.5286 19.1572 10.4062 18.7197 10.4062  c
18.4072 10.4062 18.0817 10.4609 17.7432 10.5703  c
17.4046 10.6797 17.0374 10.8438 16.6416 11.0625  c
16.6416 10.0625 l
17.0374 9.90625 17.4072 9.78646 17.7510 9.70312  c
18.0947 9.61979 18.4124 9.57812 18.7041 9.57812  c
19.4541 9.57812 20.0557 9.76562 20.5088 10.1406  c
20.9619 10.5156 21.1885 11.0208 21.1885 11.6562  c
21.1885 11.9583 21.1312 12.2422 21.0166 12.5078  c
20.9020 12.7734 20.6989 13.0885 20.4072 13.4531  c
20.3239 13.5469 20.0635 13.8203 19.6260 14.2734  c
19.1885 14.7266 18.5739 15.3594 17.7822 16.1719  c
h
f
Q
Q
Q
2 J
10.0000 M
0 J
1.45000 M
newpath
100.600 314.714 m
116.200 314.654 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
60.5000 314.598 m
92.2000 314.715 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
160.800 314.706 m
146.200 314.652 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
206.350 314.730 m
174.000 314.730 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
131.200 342.396 m
131.200 329.596 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
130.702 369.599 m
131.152 347.212 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
131.200 288.316 m
131.200 299.596 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
130.494 264.411 m
130.975 276.751 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
213.278 -29.0480 m
214.050 10.0800 l
150.650 10.0800 l
S
q
[ 1.00000 0.00000 0.00000 1.00000 172.000 -18.0000 ] concat
0 0 22 20 rc
q
q
q
Q
q
Q
q
Q
q
Q
newpath
7.14062 10.7500 m
7.14062 8.40625 l
5.20312 8.40625 l
5.20312 7.42188 l
8.31250 7.42188 l
8.31250 11.1875 l
7.85417 11.5104 7.35156 11.7552 6.80469 11.9219  c
6.25781 12.0885 5.67188 12.1719 5.04688 12.1719  c
3.67188 12.1719 2.59896 11.7708 1.82812 10.9688  c
1.05729 10.1667 .671875 9.05729 .671875 7.64062  c
.671875 6.20312 1.05729 5.08594 1.82812 4.28906  c
2.59896 3.49219 3.67188 3.09375 5.04688 3.09375  c
5.60938 3.09375 6.14844 3.16406 6.66406 3.30469  c
7.17969 3.44531 7.65625 3.65104 8.09375 3.92188  c
8.09375 5.18750 l
7.65625 4.81250 7.19010 4.53125 6.69531 4.34375  c
6.20052 4.15625 5.68229 4.06250 5.14062 4.06250  c
4.06771 4.06250 3.26302 4.36198 2.72656 4.96094  c
2.19010 5.55990 1.92188 6.45312 1.92188 7.64062  c
1.92188 8.81771 2.19010 9.70573 2.72656 10.3047  c
3.26302 10.9036 4.06771 11.2031 5.14062 11.2031  c
5.55729 11.2031 5.92969 11.1667 6.25781 11.0938  c
6.58594 11.0208 6.88021 10.9062 7.14062 10.7500  c
h
f
newpath
10.9688 13.5156 m
10.9688 16.1875 l
12.5469 16.1875 l
13.0781 16.1875 13.4714 16.0781 13.7266 15.8594  c
13.9818 15.6406 14.1094 15.3021 14.1094 14.8438  c
14.1094 14.3958 13.9818 14.0625 13.7266 13.8438  c
13.4714 13.6250 13.0781 13.5156 12.5469 13.5156  c
10.9688 13.5156 l
h
10.9688 10.5156 m
10.9688 12.7188 l
12.4219 12.7188 l
12.9115 12.7188 13.2734 12.6276 13.5078 12.4453  c
13.7422 12.2630 13.8594 11.9896 13.8594 11.6250  c
13.8594 11.2500 13.7422 10.9714 13.5078 10.7891  c
13.2734 10.6068 12.9115 10.5156 12.4219 10.5156  c
10.9688 10.5156 l
h
9.98438 9.70312 m
12.5000 9.70312 l
13.2500 9.70312 13.8281 9.85938 14.2344 10.1719  c
14.6406 10.4844 14.8438 10.9323 14.8438 11.5156  c
14.8438 11.9635 14.7396 12.3177 14.5312 12.5781  c
14.3229 12.8385 14.0208 13.0000 13.6250 13.0625  c
14.1042 13.1667 14.4792 13.3854 14.7500 13.7188  c
15.0208 14.0521 15.1562 14.4635 15.1562 14.9531  c
15.1562 15.6094 14.9349 16.1146 14.4922 16.4688  c
14.0495 16.8229 13.4167 17.0000 12.5938 17.0000  c
9.98438 17.0000 l
9.98438 9.70312 l
h
19.9229 13.0625 m
20.3916 13.1667 20.7588 13.3776 21.0244 13.6953  c
21.2900 14.0130 21.4229 14.4062 21.4229 14.8750  c
21.4229 15.5938 21.1755 16.1510 20.6807 16.5469  c
20.1859 16.9427 19.4801 17.1406 18.5635 17.1406  c
18.2614 17.1406 17.9489 17.1094 17.6260 17.0469  c
17.3031 16.9844 16.9697 16.8958 16.6260 16.7812  c
16.6260 15.8281 l
16.8968 15.9844 17.1963 16.1042 17.5244 16.1875  c
17.8525 16.2708 18.1937 16.3125 18.5479 16.3125  c
19.1624 16.3125 19.6312 16.1901 19.9541 15.9453  c
20.2770 15.7005 20.4385 15.3438 20.4385 14.8750  c
20.4385 14.4479 20.2874 14.1146 19.9854 13.8750  c
19.6833 13.6354 19.2666 13.5156 18.7354 13.5156  c
17.8760 13.5156 l
17.8760 12.7031 l
18.7666 12.7031 l
19.2562 12.7031 19.6286 12.6042 19.8838 12.4062  c
20.1390 12.2083 20.2666 11.9271 20.2666 11.5625  c
20.2666 11.1979 20.1338 10.9141 19.8682 10.7109  c
19.6025 10.5078 19.2249 10.4062 18.7354 10.4062  c
18.4645 10.4062 18.1729 10.4349 17.8604 10.4922  c
17.5479 10.5495 17.2093 10.6406 16.8447 10.7656  c
16.8447 9.89062 l
17.2197 9.78646 17.5713 9.70833 17.8994 9.65625  c
18.2275 9.60417 18.5322 9.57812 18.8135 9.57812  c
19.5635 9.57812 20.1572 9.74740 20.5947 10.0859  c
21.0322 10.4245 21.2510 10.8854 21.2510 11.4688  c
21.2510 11.8750 21.1364 12.2161 20.9072 12.4922  c
20.6781 12.7682 20.3499 12.9583 19.9229 13.0625  c
h
f
Q
Q
Q
2 J
10.0000 M
0 J
1.45000 M
newpath
300.000 30.0800 m
234.130 30.0800 l
234.130 75.0800 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
234.930 -32.7815 m
234.930 10.0800 l
300.000 10.0800 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
150.650 30.0800 m
214.050 30.0800 l
214.050 75.0800 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
194.250 20.1985 m
209.850 20.1381 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
154.150 20.0819 m
185.850 20.1992 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
254.450 20.1902 m
239.850 20.1358 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
300.000 20.2148 m
267.650 20.2148 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
224.850 47.8800 m
224.850 35.0800 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
224.352 75.0830 m
224.802 52.6960 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
224.850 -6.20000 m
224.850 5.08000 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
224.144 -30.1046 m
224.625 -17.7646 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
252.631 230.876 m
250.250 411.572 l
186.850 411.572 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
336.200 431.572 m
270.330 431.572 l
270.330 476.572 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
271.130 230.876 m
271.130 411.572 l
336.200 411.572 l
S
q
[ 1.00000 0.00000 0.00000 1.00000 290.000 371.000 ] concat
0 0 22 20 rc
q
q
q
Q
q
Q
q
Q
q
Q
newpath
7.14062 10.7500 m
7.14062 8.40625 l
5.20312 8.40625 l
5.20312 7.42188 l
8.31250 7.42188 l
8.31250 11.1875 l
7.85417 11.5104 7.35156 11.7552 6.80469 11.9219  c
6.25781 12.0885 5.67188 12.1719 5.04688 12.1719  c
3.67188 12.1719 2.59896 11.7708 1.82812 10.9688  c
1.05729 10.1667 .671875 9.05729 .671875 7.64062  c
.671875 6.20312 1.05729 5.08594 1.82812 4.28906  c
2.59896 3.49219 3.67188 3.09375 5.04688 3.09375  c
5.60938 3.09375 6.14844 3.16406 6.66406 3.30469  c
7.17969 3.44531 7.65625 3.65104 8.09375 3.92188  c
8.09375 5.18750 l
7.65625 4.81250 7.19010 4.53125 6.69531 4.34375  c
6.20052 4.15625 5.68229 4.06250 5.14062 4.06250  c
4.06771 4.06250 3.26302 4.36198 2.72656 4.96094  c
2.19010 5.55990 1.92188 6.45312 1.92188 7.64062  c
1.92188 8.81771 2.19010 9.70573 2.72656 10.3047  c
3.26302 10.9036 4.06771 11.2031 5.14062 11.2031  c
5.55729 11.2031 5.92969 11.1667 6.25781 11.0938  c
6.58594 11.0208 6.88021 10.9062 7.14062 10.7500  c
h
f
newpath
10.9688 13.5156 m
10.9688 16.1875 l
12.5469 16.1875 l
13.0781 16.1875 13.4714 16.0781 13.7266 15.8594  c
13.9818 15.6406 14.1094 15.3021 14.1094 14.8438  c
14.1094 14.3958 13.9818 14.0625 13.7266 13.8438  c
13.4714 13.6250 13.0781 13.5156 12.5469 13.5156  c
10.9688 13.5156 l
h
10.9688 10.5156 m
10.9688 12.7188 l
12.4219 12.7188 l
12.9115 12.7188 13.2734 12.6276 13.5078 12.4453  c
13.7422 12.2630 13.8594 11.9896 13.8594 11.6250  c
13.8594 11.2500 13.7422 10.9714 13.5078 10.7891  c
13.2734 10.6068 12.9115 10.5156 12.4219 10.5156  c
10.9688 10.5156 l
h
9.98438 9.70312 m
12.5000 9.70312 l
13.2500 9.70312 13.8281 9.85938 14.2344 10.1719  c
14.6406 10.4844 14.8438 10.9323 14.8438 11.5156  c
14.8438 11.9635 14.7396 12.3177 14.5312 12.5781  c
14.3229 12.8385 14.0208 13.0000 13.6250 13.0625  c
14.1042 13.1667 14.4792 13.3854 14.7500 13.7188  c
15.0208 14.0521 15.1562 14.4635 15.1562 14.9531  c
15.1562 15.6094 14.9349 16.1146 14.4922 16.4688  c
14.0495 16.8229 13.4167 17.0000 12.5938 17.0000  c
9.98438 17.0000 l
9.98438 9.70312 l
h
19.6416 10.5625 m
17.1572 14.4531 l
19.6416 14.4531 l
19.6416 10.5625 l
h
19.3760 9.70312 m
20.6260 9.70312 l
20.6260 14.4531 l
21.6572 14.4531 l
21.6572 15.2812 l
20.6260 15.2812 l
20.6260 17.0000 l
19.6416 17.0000 l
19.6416 15.2812 l
16.3447 15.2812 l
16.3447 14.3281 l
19.3760 9.70312 l
h
f
Q
Q
Q
2 J
10.0000 M
0 J
1.45000 M
newpath
186.850 431.572 m
250.250 431.572 l
250.250 476.572 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
230.450 421.690 m
246.050 421.630 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
190.350 421.574 m
222.050 421.691 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
290.650 421.682 m
276.050 421.628 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
336.200 421.706 m
303.850 421.706 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
261.050 449.372 m
261.050 436.572 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
260.552 476.575 m
261.002 454.188 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
261.050 395.292 m
261.050 406.572 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
261.050 229.984 m
261.050 383.724 l
S
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
